import modal

stub = modal.Stub("code_interpreter")


@stub.function()
def interpret_code(
    user_code: str, test_cases: list
):  # should take the users code and test cases generated by groq
    exec_globals = {}

    try:
        exec(
            user_code, exec_globals
        )  # running the code and putting the results in exec_globals
        user_func = exec_globals.get(
            "user_function"
        )  # getting the user function from the code

        results = []

        for test_case in test_cases:
            try:
                result = user_func(
                    *test_case["input"]
                )  # takes user's input from user code and runs it with the test case input
                results.append(
                    result == test_case["output"]
                )  # checks if the output is correct and adds it to the results

            except Exception as e:
                results.append(
                    {
                        "input": test_case["input"],
                        "expected": test_case["expected_output"],
                        "output": result,
                        "passed": result == test_case["expected_output"],
                    }
                )  # if the code fails, it adds the test case to the results

        return results

    except Exception as e:
        return {"error": str(e)}  # failsafe in case the code is invalid


interpret_code()
